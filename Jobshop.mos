!@encoding CP1252
model FJSSP
  uses "mmxprs"; !gain access to the Xpress-Optimizer solver
  uses "mmsystem"
  options noimplicit


!optional parameters section
parameters
	INSTANCEFILE = "instances/JSP0.txt"
   	minus_inf = -100000
    RUNTIMELIMIT = -60
    OUTPUTFILE = "output.txt"
end-parameters
setparam("XPRS_MAXTIME", RUNTIMELIMIT)

forward procedure print_MIPstatus
forward procedure tripel_algorithmus(deadline: integer)



!sample declarations section
declarations
  AnzahlM : integer
  AnzahlJobs : range
  startTime : real
  cpuTime : real
    M: integer
    n: integer
  Operationen : array (AnzahlJobs) of list of integer
  Bearbeitungszeit : array (range, AnzahlJobs) of integer
  Reihenfolge : array (AnzahlJobs, range) of integer
  x_ijt: array(range,range,range) of mpvar
  C : array(range,range) of integer
  C_max : mpvar

    dummy:  integer
  p_ij : array(range,range) of integer
  w_ijk: array(range,range,range) of mpvar

    ES: array (range,range) of integer
    LS:array (range,range) of integer
  D     : array(range,range,range,range) of integer			! Distanzmatrix
  Maxt : integer
  Adjazenzmatrix : array (range,range,range,range) of integer

end-declarations




! Einbinden der Informationen aus den Instanz-Daten
initializations from INSTANCEFILE
  Operationen
  Bearbeitungszeit
  Reihenfolge
end-initializations

!!! Anzahl der Maschinen als Integer für jede Instanz berechnen !!!
AnzahlM := 0
forall(j in AnzahlJobs)do
  if AnzahlM < max(i in Operationen(j))i then
    AnzahlM := max(i in Operationen(j))i
  end-if
end-do

!!! Anzahl der Jobs als Integer für jede Instanz berechnen !!!
n:=0
forall(j in AnzahlJobs)
 n+=1




!!! Berechnung der Zeit-range !!!
Maxt :=  max( j in AnzahlJobs)sum(i in 1..AnzahlM)Bearbeitungszeit(i,j)*2

!!! BIG M für jede Instanz berechnen !!!
M := (n-1) * max( j in AnzahlJobs)sum(i in 1..AnzahlM)Bearbeitungszeit(i,j) + 1

tripel_algorithmus(Maxt)



forall(j in AnzahlJobs, i in 1..3| Reihenfolge(j, i+1) <> 0)
  Adjazenzmatrix(j,Reihenfolge(j, i),j,Reihenfolge(j, i+1)) := 1


forall(i in AnzahlJobs, j in AnzahlJobs , k in 1..AnzahlM | i<>j and Bearbeitungszeit(k,i)>0 and Bearbeitungszeit(k,j)>0)
  Adjazenzmatrix(i,k,j,k):=1





!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!!! Nebenbedingung 1 (Festlegen der binären Eigenschaft von x_ijt) !!!
forall(i in AnzahlJobs, j in Operationen(i), t in 0..Maxt)
  x_ijt(i,j,t) is_binary

!!! Nebenbedingung 2 (Bedingung, dass eine Operation nur zu einem Zeitpunkt starten kann) !!!
forall(i in AnzahlJobs, j in Operationen(i))
  sum(t in 0..Maxt)(x_ijt(i,j,t)) = 1
  

!! Nebenbedingung 4 ((Einhaltung der Maschinenfolge) !!!
forall(i in AnzahlJobs, k in 1..AnzahlM-1 | Reihenfolge(i, k+1) <> 0) do
  sum(t in 0..Maxt)(t*x_ijt(i,Reihenfolge(i,k),t)) + Bearbeitungszeit(Reihenfolge(i,k),i) <= sum(t in 0..Maxt)(t*x_ijt(i,Reihenfolge(i,k+1),t))
  !sum(t in 0..Maxt)x_ijt(i,Reihenfolge(i,k),t) = dummy(i,Reihenfolge(i,k))
end-do


! !!! Nebenbedingung  5 ((Bestimmung der Job Reihenfolge auf jeder Maschine) !!!
forall(t in 0..Maxt, i in 1..AnzahlM)
 sum(j in AnzahlJobs, t_ in t-Bearbeitungszeit(i,j)+1..t)x_ijt(j,i,t_) <= 1


!!! Zielfunktion (Bestimmung der maximalen Fertigstellungszeit) !!!
forall (i in AnzahlJobs, j in Operationen(i))
     C_max >= sum(t in 0..Maxt)(t*x_ijt(i,j,t)) + Bearbeitungszeit(j,i)



!!! Minimalisieren der Zielfunktion und Berechnen der Zeit zum Lösen !!!
startTime:=gettime
minimize(C_max)
cpuTime:=gettime - startTime


writeln(getprobstat)

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!Auswertung - Ergebnisse werden in Text-Datei "OUTPUTFILE" geschrieben
! (Standard: "output.txt" im gleichen Ordner wie ausgefuehrte mos-Datei)


!Schreiben der "Kopfzeile", falls OUTPUTFILE nicht existiert
if bittest(getfstat(OUTPUTFILE), SYS_TYP)<>SYS_REG then
	fopen(OUTPUTFILE, F_APPEND);
		writeln("Instance     \tSo\tSolStatus\tCPUtime\tBestBound\tOriginalRows\tOriginalCols\tRows\tCols\tNodes");
	fclose(F_APPEND);
end-if

!Auslesen der Ergebnisse (werden der naechsten Zeile hinzugefuegt)
fopen(OUTPUTFILE, F_APPEND);
	write(string(INSTANCEFILE), "\t");
	write(getobjval, "\t");
	print_MIPstatus;
	write("\t");
	write(cpuTime, "\t");
	write(getparam("XPRS_BESTBOUND"),"\t");		! Value of the best bound determined so far by the global search
	write(getparam("XPRS_ORIGINALROWS"),"\t"); 	! Number of rows (i.e. constraints) in the original matrix before presolving
   	write(getparam("XPRS_ORIGINALCOLS"),"\t");	! Number of columns (i.e. variables) in the original matrix before presolving
	write(getparam("XPRS_ROWS"),"\t");			! Number of rows (i.e. constraints) in the matrix after presolving
    write(getparam("XPRS_COLS"),"\t");			! Number of columns (i.e. variables) in the matrix after presolving
	write(getparam("XPRS_NODES"),"\n");			! Number of nodes solved so far in the global search. A node is counted as solved when it is either dropped or branched on.
	forall (j in AnzahlJobs, i in Operationen(j), t in 0..Maxt)do
	if getsol(x_ijt(i,j,t)) = 1 then
	write("Job: ",j," Operation: ",i, " Start: ",t,"  ")
	end-if
	end-do
fclose(F_APPEND);

!!! Status der Lösung bestimmen !!!
procedure print_MIPstatus
 declarations
  status: string;
 end-declarations

 case getparam("XPRS_mipstatus") of
   XPRS_MIP_OPTIMAL: status:="Optimal";
   XPRS_MIP_SOLUTION: status:="Feasible";
   XPRS_MIP_INFEAS: status:="Infeasible";
   XPRS_MIP_UNBOUNDED: status:="Unbounded";
   XPRS_MIP_NO_SOL_FOUND: status:="NoSolutionFound";
   XPRS_MIP_LP_NOT_OPTIMAL: status:="NoSolutionFound";
   XPRS_MIP_LP_OPTIMAL: status:="NoSolutionFound";
  else status:="???";
  end-case


 write(status);
end-procedure

procedure print_problemStatus
 declarations
  status: string;
 end-declarations

 case getprobstat of
  XPRS_OPT: status:="Optimal";
  XPRS_UNF: status:="Unfinished";
  XPRS_INF: status:="Infeasible";
  XPRS_UNB: status:="Unbounded";
  XPRS_OTH: status:="NoSolutionFound";
 else status:="???";


 end-case


end-procedure

! Prozedur des Tripel Algorithmus 
procedure tripel_algorithmus(deadline: integer)

! Initialisierung:
forall(i in AnzahlJobs, j in Operationen(i)) do
	D(i,j,i,j) := 0
	forall(i_ in AnzahlJobs, j_ in Operationen(i_) | i <> i_ and j <> j_) do
		if(Adjazenzmatrix(i,j,i_,j_) = 1) then
			D(i,j,i_,j_) := Bearbeitungszeit(j,i)
		else
			D(i,j,i_,j_) := minus_inf
		end-if
	end-do
end-do

! Setze Hoechstabstand zwischen Projektsstart und -ende
D(n+1,AnzahlM+1,0,0) := -deadline

! Hauptschritt:
forall(nu in AnzahlJobs, j in Operationen(nu)) do
	forall(i in AnzahlJobs, j_ in Operationen(i) | i<>nu and j<>j_ and D(i,j,nu,j_) > minus_inf) do
		forall(i_ in AnzahlJobs, J_ in Operationen(i_) | j <> nu and j_<>J_ and D(nu,j,i_,J_) > minus_inf and D(i,j_,i_,J_) < D(i,j_,nu,j) + D(nu,j,i_,J_)) do
			D(i,j_,i_,J_) := D(i,j_,nu,j) + D(nu,j,i_,J_)
		end-do
	end-do
end-do

end-procedure


end-model
